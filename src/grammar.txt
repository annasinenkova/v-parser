Grammar:
    1. MODULE -> "module" NAME_OF_MODULE (MODULE_PARAMETER_DECLARATION)? LIST_OF_PORTS ";" (MODULE_ITEM ";")* "endmodule" 
    2. NAME_OF_MODULE -> IDENTIFIER
    3. MODULE_PARAMETER_DECLARATION -> "#" "(" LIST_OF_PARAMETERS ")"
    4. LIST_OF_PARAMETERS -> "parameter" PARAM_ASSIGNMENT ("," "parameter" PARAM_ASSIGNMENT)*
    5. IDENTIFIER -> последовательность букв/цифр и нижнего подчеркивания(первый символ - буква или подчеркивание)
    6. LIST_OF_PORTS -> "(" PORT ("," PORT)* ")" | eps
    7. PORT -> "input" (RANGE)? NAME_OF_PORT | "output" (RANGE)? NAME_OF_PORT | NAME_OF_PORT
    8. NAME_OF_PORT -> IDENTIFIER
    9. MODULE_ITEM -> PARAMETER_DECLARATION | WIRE_DECLARATION | INPUT_DECLARATION | OUTPUT_DECLARATION | GATE_DECLARATION | MODULE_INSTANTIATION | CONTINUOUS_ASSIGN
    10. PARAMETER_DECLARATION -> "parameter" LIST_OF_PARAM_ASSIGNMENTS
    11. LIST_OF_PARAM_ASSIGNMENTS -> PARAM_ASSIGNMENT ("," PARAM_ASSIGNMENT)*
    12. PARAM_ASSIGNMENT -> IDENTIFIER "=" CONSTANT_EXPRESSION
    13. WIRE_DECLARATION -> "wire" LIST_OF_VARIABLES
    14. INPUT_DECLARATION -> "input" LIST_OF_VARIABLES
    15. OUTPUT_DECLARATION -> "output" LIST_OF_VARIABLES
    16. RANGE -> "[" CONSTANT_EXPRESSION ":" CONSTANT_EXPRESSION "]"
    16. LIST_OF_VARIABLES -> (RANGE)? NAME_OF_VARIABLE ("," (RANGE)? NAME_OF_VARIABLE)*
    17. NAME_OF_VARIABLE -> IDENTIFIER
    18. GATE_DECLARATION -> GATETYPE GATE_INSTANCE
    19. GATETYPE -> "and" | "nand" | "or" | "nor" | "xor" | "not"
    20. GATE_INSTANCE -> "(" TERMINAL ("," TERMINAL)* ")"
    21. TERMINAL -> IDENTIFIER
    22. MODULE_INSTANTIATION -> NAME_OF_MODULE MODULE_INSTANCE ("," MODULE_INSTANCE)*
    23. MODULE_INSTANCE -> NAME_OF_INSTANCE "(" LIST_OF_MODULE_CONNECTIONS ")"
    24. NAME_OF_INSTANCE -> IDENTIFIER
    25. LIST_OF_MODULE_CONNECTIONS -> PORT_CONNECTION ("," PORT_CONNECTION)*
    26. PORT_CONNECTION -> "." IDENTIFIER "(" IDENTIFIER ")" | eps
    27. CONTINUOUS_ASSIGN -> "assign" ASSIGNMENT
    28. ASSIGNMENT -> IDENTIFIER "=" EXPRESSION
    29. EXPRESSION -> PRIMARY | UNARY_OPERATOR PRIMARY | EXPRESSION BINARY_OPERATOR EXPRESSION | "(" EXPRESSION ")"
    30. PRIMARY -> IDENTIFIER
    31. UNARY_OPERATOR -> "~"
    32. BINARY_OPERATOR -> "&&" | "||" | "&" | "|" | "^" | "^~" | "~^"



RD-grammar:
    1. MODULE -> "module" IDENTIFIER ("#" MODULE_PARAMETER_DECLARATION)? LIST_OF_PORTS ";" MODULE_ITEM
    2. MODULE_PARAMETER_DECLARATION -> "(" LIST_OF_PARAMETERS ")"
    3. LIST_OF_PARAMETERS -> "parameter" PARAM_ASSIGNMENT ("," --||--)*
    10. PARAM_ASSIGNMENT -> IDENTIFIER "=" CONSTANT_EXPRESSION
    4. LIST_OF_PORTS -> "(" PORTS ")" | eps
    6. PORTS -> "input" (RANGE)? IDENTIFIER | "output" (RANGE)? IDENTIFIER | IDENTIFIER           ("," --||--)*
    8. RANGE -> "[" CONSTANT_EXPRESSION ":" CONSTANT_EXPRESSION "]"
    7. MODULE_ITEM -> "endmodule" | DECLARATION ";" MODULE_ITEM
    8. DECLARATION -> "parameter" LIST_OF_PARAM_ASSIGNMENTS | "wire" LIST_OF_VARIABLES | "input" LIST_OF_VARIABLES | "output" LIST_OF_VARIABLES | "assign" ASSIGNMENT | GATE_DECLARATION
    9. LIST_OF_PARAM_ASSIGNMENTS -> PARAM_ASSIGNMENT ("," --||--)*
    12. LIST_OF_VARIABLES -> (RANGE)? IDENTIFIER ("," IDENTIFIER)*
    14. GATE_DECLARATION -> GATETYPE GATE_INSTANCE | MODULE_INSTANTIATION
    15. GATETYPE -> "and" | "nand" | "or" | "nor" | "xor" | "not"
    16. GATE_INSTANCE -> "(" IDENTIFIER TERMINALS_ITER ")"
    17. TERMINALS_ITER -> "," IDENTIFIER TERMINALS_ITER | eps
    18. MODULE_INSTANTIATION -> IDENTIFIER MODULE_INSTANCE
    20. MODULE_INSTANCE -> IDENTIFIER "(" LIST_OF_MODULE_CONNECTIONS ")" ("," --||--)* 
    21. LIST_OF_MODULE_CONNECTIONS -> "." IDENTIFIER "(" IDENTIFIER ")" ("," --||--)* | eps
    24. ASSIGNMENT -> IDENTIFIER "=" EXPRESSION
    25.     A -> B "||" A | B
            B -> C "&&" B | C
            C -> D "|"  C | D
            D -> E "^"  D | E "^~" D | E "~^" D | E
            E -> F "&"  E | F
            F -> IDENTIFIER | "~" IDENTIFIER | "(" A ")" 